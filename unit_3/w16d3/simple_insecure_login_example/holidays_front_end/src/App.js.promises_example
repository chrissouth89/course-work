import React from "react";

class App extends React.Component {
  state = {
    giggleLibs: [],
    userLibs: [],
  };

  fetchGiggleLibs = new Promise((resolve, reject) => {
    fetch("https://jsonplaceholder.typicode.com/todos")
      .then((response) => response.json())
      .then((json) => {
        resolve(json);
        // console.log(json);
      });
  });

  fetchUserLibs = new Promise((resolve, reject) => {
    fetch("https://jsonplaceholder.typicode.com/todos")
      .then((response) => response.json())
      .then((json) => {
        let returnValue = [];
        returnValue = { somethingExtra: "Extra data can go here", data: json };
        resolve(returnValue);
        // console.log(json);
      });
  });

  render() {
    console.log("App.js - Render() - State", this.state);

    return <div className="App">Hi</div>;
  }

  componentDidMount = async () => {
    // have each return a value
    let giggleLibs = await this.fetchGiggleLibs;
    let userLibs = await this.fetchUserLibs;

    // These won't fire until the promises resolve:
    console.log("got giggleLibs back!", giggleLibs);
    console.log("got userLibs back!", userLibs);

    // then call setState here vs inside the functions.
    this.setState({ giggleLibs, userLibs });
  };
}
export default App;
